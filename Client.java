
//imports significant number are unnesscesary, and are carried over from an earlier implementation that used multiple classes for the GUI
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.awt.EventQueue;

import javax.swing.JFrame;
import java.awt.GridLayout;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import java.awt.GridBagLayout;
import javax.swing.JLabel;
import java.awt.GridBagConstraints;
import javax.swing.JButton;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.awt.Component;
import javax.swing.Box;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import javax.swing.JTextField;
import java.awt.Dimension;
import java.awt.EventQueue;

import javax.swing.JFrame;
import java.awt.GridLayout;
import javax.swing.JTabbedPane;
import java.awt.GridBagLayout;
import javax.swing.JTextField;
import java.awt.GridBagConstraints;
import java.awt.Component;
import javax.swing.Box;
import java.awt.Dimension;
import java.awt.Insets;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.SwingConstants;

import javax.swing.JPanel;
import javax.swing.AbstractAction;
import javax.swing.Action;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.PrintWriter;
import javax.swing.JTextArea;

/**
 * 
 * @author Pranav Patel and Duncan Wilson
 * @ID 150380910 and 150322290
 * @Purpose class for Assignment 1
 *
 */
public class Client {
	// input and output used to communicate with server
	static BufferedReader in = null;
	static PrintWriter out = null;
	// Log in screen frame, used to get server IP and port and connect client to
	// server
	static JFrame ConnectScreenframe;
	// Main frame used for all of the queries and client input output
	static JFrame mainWindowframe;

	// button group for query selection pins, makes it so only one query type can be
	// selected at a time
	private final static ButtonGroup buttonGroup = new ButtonGroup();

	// text field for coordinate entry
	static JTextField txtFieldCoordinates;

	// text field for client output which displays the response from server or an
	// error message generated by the client
	static JTextArea txtFieldClientOutput;
	// Boolean running = true; <- antiquated
	// The four radio buttons representing the query types that require client to
	// input additional arguments
	static JRadioButton rdBtnPin;
	static JRadioButton rdBtnPost;
	static JRadioButton rdBtnGet;
	static JRadioButton rdBtnUnpin;

	// This text area shows the client info sent by the server when connection is
	// established
	// var named txtField despite it technically being a text area
	static JTextArea txtFieldServerInfo;
	// text field for colour argument entry
	static JTextField txtFieldColours;
	// text field for substring/message argument input
	static JTextField txtFieldSubstring;

	// used by connection screen to take the ip address for connection
	private static JTextField txtFieldIPAddr;
	// used by the connection screen to take the port for connection
	private static JTextField txtFieldPort;

	// main starts the two guis, sets the connection screen visible and loops
	public static void main(String[] args) throws Exception {

		// consume display output message from server
		// System.out.println(in.readLine());
		// get_lines_from_server(in);

		// Scanner scanner = new Scanner(System.in);

		// rudimentary input output for testing server pre gui functionality
		// implementation
		/*
		 * while (true) {
		 * System.out.println("\nEnter a string to send to the server (empty to quit):"
		 * ); String message = scanner.nextLine(); if (message == null ||
		 * message.isEmpty() || message.equals("disconnect")) { break; }
		 * out.println(message); System.out.println(in.readLine());
		 * get_lines_from_server(in); } scanner.close(); socket.close();
		 * 
		 */

		initializeConnectScreen();
		mainWindowinitialize();

		ConnectScreenframe.setVisible(true);
		while (ConnectScreenframe.isVisible()) {
			int i = 0;
		}
		// antiquated
		while (true) {
			int i = 0;
		}

	}

	/**
	 * 
	 * @param in
	 * @throws IOException
	 * 
	 *                     Will display all the message coming from server on
	 *                     multiple lines until blank " " line call this function
	 *                     when waiting for server to send something after
	 *                     in.readline
	 */
	private static String get_lines_from_server(BufferedReader in) throws IOException {
		String serverMessage = "";
		String str;
		while (!(str = in.readLine()).equals(" ")) {
			serverMessage += str + "\n";
		}
		return serverMessage;

	}
	// method to handle post query minimal error handling, will catch errors for
	// invalid input to server and return generic error messasge

	public static String post(String argument, BufferedReader in, PrintWriter out) {

		out.println("post " + argument);
		String serverResponse = "";
		try {
			serverResponse = get_lines_from_server(in);
		} catch (IOException e) {

			serverResponse = "Invalid input for query:Post";
		}
		return serverResponse;
	}
	// method to handle get query (excluding get pins since that has a button). Some
	// error checking for number of arguments with decent error message
	// method will catch other errors and return generic error message

	public static String get(String argument, BufferedReader in, PrintWriter out) {
		String arguments[] = argument.split(" ");
		if (arguments[0].equals("null") && arguments[1].equals("null") && arguments[2].equals("null")) {
			return "Get requires atleast one argument!";
		} else {
			out.println("get " + argument);
			String serverResponse = "";
			try {
				serverResponse = get_lines_from_server(in);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				serverResponse = "Invalid input for query:Get";
			}
			return serverResponse;
		}

	}

//method for pin full error checkign for inputs to pin with generic error message
	public static String pin(String argument, BufferedReader in, PrintWriter out) {
		String serverResponse = "";

		String arguments[] = argument.split(" ");
		if (arguments.length == 2 && isNumeric(arguments[0]) && isNumeric(arguments[1])) {

			try {
				out.println("pin " + argument);
				serverResponse = get_lines_from_server(in);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				serverResponse = "Invalid input for query:Pin";
			}

		} else {
			serverResponse = "Invalid input for query:Pin";
		}

		return serverResponse;
	}

	// method for unpin full error checking for inputs to pin with generic error
	// message
	public static String unpin(String argument, BufferedReader in, PrintWriter out) {

		String serverResponse = "";

		String arguments[] = argument.split(" ");
		if (arguments.length == 2 && isNumeric(arguments[0]) && isNumeric(arguments[1])) {

			try {
				out.println("unpin " + argument);
				serverResponse = get_lines_from_server(in);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				serverResponse = "Invalid input for query:Unpin";
			}

		} else {
			serverResponse = "Invalid input for query:Unpin";
		}

		return serverResponse;

	}

//method for clear query, generic error catching this method is safe and shouldnt encounter errors try catch block added to satisfy compiler
	public static String clear(BufferedReader in, PrintWriter out) {
		out.println("clear");
		String serverResponse = "";
		try {
			serverResponse = get_lines_from_server(in);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return serverResponse;
	}

//method for disconnect from server just exits client with system exit
	public static void disconnect() {
		System.exit(0);
	}

	// antiquated
	public static void connect() throws Exception {

	}

	// String utility function used to check if a string can be converted to an
	// integer
	public static boolean isNumeric(String argument) {
		try {
			Integer.parseInt(argument);
		} catch (NumberFormatException e) {

			return false;
		}

		return true;
	}

	// get pins method, handles the pins request for the get query to simplify input
	// for other get queries.
	// method is safe shouldnt run into errors, so try catch block is just to
	// satisfy compiler
	public static String getPins() {
		out.println("get pins");
		String serverResponse = "";
		try {
			serverResponse = get_lines_from_server(in);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return serverResponse;

	}

//this method initializes the connect screen
	private static void initializeConnectScreen() {
		ConnectScreenframe = new JFrame();
		ConnectScreenframe.setBounds(100, 100, 505, 278);
		ConnectScreenframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		JPanel panel = new JPanel();
		ConnectScreenframe.getContentPane().add(panel, BorderLayout.CENTER);
		GridBagLayout gbl_panel = new GridBagLayout();
		gbl_panel.columnWidths = new int[] { 0, 92, 0, 0, 0, 0, 0, 0, 0 };
		gbl_panel.rowHeights = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		gbl_panel.columnWeights = new double[] { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, Double.MIN_VALUE };
		gbl_panel.rowWeights = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, Double.MIN_VALUE };
		panel.setLayout(gbl_panel);
		// User greeting
		JLabel lblNewLabel = new JLabel("Welcome User! Enter the server IP address, and port then press connect.");
		GridBagConstraints gbc_lblNewLabel = new GridBagConstraints();
		gbc_lblNewLabel.anchor = GridBagConstraints.WEST;
		gbc_lblNewLabel.gridwidth = 5;
		gbc_lblNewLabel.insets = new Insets(0, 0, 5, 5);
		gbc_lblNewLabel.gridx = 1;
		gbc_lblNewLabel.gridy = 1;
		panel.add(lblNewLabel, gbc_lblNewLabel);
		// label for server ip text field
		JLabel lblServerIpAddress = new JLabel("Server IP Address:");
		GridBagConstraints gbc_lblServerIpAddress = new GridBagConstraints();
		gbc_lblServerIpAddress.anchor = GridBagConstraints.WEST;
		gbc_lblServerIpAddress.insets = new Insets(0, 0, 5, 5);
		gbc_lblServerIpAddress.gridx = 1;
		gbc_lblServerIpAddress.gridy = 2;
		panel.add(lblServerIpAddress, gbc_lblServerIpAddress);
		// strut for aesthetic
		Component verticalStrut = Box.createVerticalStrut(20);
		GridBagConstraints gbc_verticalStrut = new GridBagConstraints();
		gbc_verticalStrut.anchor = GridBagConstraints.SOUTH;
		gbc_verticalStrut.insets = new Insets(0, 0, 5, 0);
		gbc_verticalStrut.gridx = 7;
		gbc_verticalStrut.gridy = 2;
		panel.add(verticalStrut, gbc_verticalStrut);
		// rigid area for aesthetic
		Component rigidArea = Box.createRigidArea(new Dimension(20, 20));
		GridBagConstraints gbc_rigidArea = new GridBagConstraints();
		gbc_rigidArea.insets = new Insets(0, 0, 5, 5);
		gbc_rigidArea.gridx = 0;
		gbc_rigidArea.gridy = 3;
		panel.add(rigidArea, gbc_rigidArea);
		// text field for user to enter ip address of server
		txtFieldIPAddr = new JTextField();
		GridBagConstraints gbc_txtFieldIPAddr = new GridBagConstraints();
		gbc_txtFieldIPAddr.fill = GridBagConstraints.HORIZONTAL;
		gbc_txtFieldIPAddr.gridwidth = 5;
		gbc_txtFieldIPAddr.insets = new Insets(0, 0, 5, 5);
		gbc_txtFieldIPAddr.gridx = 1;
		gbc_txtFieldIPAddr.gridy = 3;
		panel.add(txtFieldIPAddr, gbc_txtFieldIPAddr);
		txtFieldIPAddr.setColumns(10);
		// label for the port textfield
		JLabel lblPort = new JLabel("Port:");
		GridBagConstraints gbc_lblPort = new GridBagConstraints();
		gbc_lblPort.anchor = GridBagConstraints.WEST;
		gbc_lblPort.insets = new Insets(0, 0, 5, 5);
		gbc_lblPort.gridx = 1;
		gbc_lblPort.gridy = 4;
		panel.add(lblPort, gbc_lblPort);
		// text field for user to enter port
		txtFieldPort = new JTextField();
		txtFieldPort.setText("4554");
		GridBagConstraints gbc_txtFieldPort = new GridBagConstraints();
		gbc_txtFieldPort.gridwidth = 5;
		gbc_txtFieldPort.insets = new Insets(0, 0, 5, 5);
		gbc_txtFieldPort.fill = GridBagConstraints.HORIZONTAL;
		gbc_txtFieldPort.gridx = 1;
		gbc_txtFieldPort.gridy = 5;
		panel.add(txtFieldPort, gbc_txtFieldPort);
		txtFieldPort.setColumns(10);
		// connect button for user to connect to server
		JButton btnConnectButton = new JButton("Connect");
		btnConnectButton.addMouseListener(new MouseAdapter() {
			@Override
			// method to connect to server when connect button is pressed try catch handles
			// all errors whether its an unable to connect error or invalid input error
			public void mouseClicked(MouseEvent arg0) {
				try {
					// gets the user input
					String serverIP = txtFieldIPAddr.getText().trim();
					String serverPort = txtFieldPort.getText().trim();
					// antiquated
					String[] checkIP = serverIP.split(".");
					// System.out.println(serverIP); <- antiquated

					Socket socket = new Socket(serverIP, Integer.parseInt(serverPort));

					// communicating with server
					in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
					out = new PrintWriter(socket.getOutputStream(), true);
					// gets the server info from client connecting
					String mainWindowOutput = in.readLine();
					// gets rid of the connect screen and shows the main query screen
					ConnectScreenframe.setVisible(false);
					mainWindowframe.setVisible(true);

					// sets the server info in the box for it
					txtFieldServerInfo.setText(mainWindowOutput);
					// clears an empty line from the server output
					in.readLine();

				} catch (IOException e) {
					// generic error message
					txtFieldIPAddr.setText("Invalid IP Address or Port try again!");
				}

			}
		});
		GridBagConstraints gbc_btnConnectButton = new GridBagConstraints();
		gbc_btnConnectButton.gridwidth = 2;
		gbc_btnConnectButton.insets = new Insets(0, 0, 5, 5);
		gbc_btnConnectButton.gridx = 4;
		gbc_btnConnectButton.gridy = 6;
		panel.add(btnConnectButton, gbc_btnConnectButton);
		// strut for aesthetic
		Component verticalStrut_1 = Box.createVerticalStrut(20);
		GridBagConstraints gbc_verticalStrut_1 = new GridBagConstraints();
		gbc_verticalStrut_1.anchor = GridBagConstraints.NORTH;
		gbc_verticalStrut_1.gridx = 7;
		gbc_verticalStrut_1.gridy = 7;
		panel.add(verticalStrut_1, gbc_verticalStrut_1);
	}

	// initializes the query window
	private static void mainWindowinitialize() {
		mainWindowframe = new JFrame();
		mainWindowframe.setBounds(100, 100, 670, 622);
		mainWindowframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		mainWindowframe.getContentPane().setLayout(new GridLayout(0, 1, 0, 0));

		JPanel panel = new JPanel();
		mainWindowframe.getContentPane().add(panel);
		GridBagLayout gbl_panel = new GridBagLayout();
		gbl_panel.columnWidths = new int[] { 0, 138, 132, 0, 0, 70, 30, 0, 0, 0 };
		gbl_panel.rowHeights = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0 };
		gbl_panel.columnWeights = new double[] { 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE };
		gbl_panel.rowWeights = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
				0.0, Double.MIN_VALUE };
		panel.setLayout(gbl_panel);
		// rigid area for aesthetic
		Component rigidArea_1 = Box.createRigidArea(new Dimension(20, 20));
		rigidArea_1.setMaximumSize(new Dimension(20, 40));
		GridBagConstraints gbc_rigidArea_1 = new GridBagConstraints();
		gbc_rigidArea_1.insets = new Insets(0, 0, 5, 5);
		gbc_rigidArea_1.gridx = 1;
		gbc_rigidArea_1.gridy = 1;
		panel.add(rigidArea_1, gbc_rigidArea_1);
		// label for coordinate input box
		JLabel lblEnterYourCoordinates = new JLabel(
				"Enter your x y coordinates (seperated by spaces), and width and height (if applicable):");
		GridBagConstraints gbc_lblEnterYourCoordinates = new GridBagConstraints();
		gbc_lblEnterYourCoordinates.gridwidth = 5;
		gbc_lblEnterYourCoordinates.anchor = GridBagConstraints.WEST;
		gbc_lblEnterYourCoordinates.insets = new Insets(0, 0, 5, 5);
		gbc_lblEnterYourCoordinates.gridx = 1;
		gbc_lblEnterYourCoordinates.gridy = 2;
		panel.add(lblEnterYourCoordinates, gbc_lblEnterYourCoordinates);
		// Antiquated label
		JLabel lblNewLabel_1 = new JLabel("");
		GridBagConstraints gbc_lblNewLabel_1 = new GridBagConstraints();
		gbc_lblNewLabel_1.fill = GridBagConstraints.HORIZONTAL;
		gbc_lblNewLabel_1.gridwidth = 5;
		gbc_lblNewLabel_1.insets = new Insets(0, 0, 5, 5);
		gbc_lblNewLabel_1.gridx = 1;
		gbc_lblNewLabel_1.gridy = 3;
		panel.add(lblNewLabel_1, gbc_lblNewLabel_1);
		// rigid area for esthetic
		Component rigidArea = Box.createRigidArea(new Dimension(30, 20));
		rigidArea.setMaximumSize(new Dimension(20, 20));
		GridBagConstraints gbc_rigidArea = new GridBagConstraints();
		gbc_rigidArea.insets = new Insets(0, 0, 5, 5);
		gbc_rigidArea.gridx = 0;
		gbc_rigidArea.gridy = 4;
		panel.add(rigidArea, gbc_rigidArea);
		// text field for client coordinates /width height input
		txtFieldCoordinates = new JTextField();
		GridBagConstraints gbc_txtFieldCoordinates = new GridBagConstraints();
		txtFieldCoordinates.setText("");
		gbc_txtFieldCoordinates.gridwidth = 5;
		gbc_txtFieldCoordinates.fill = GridBagConstraints.HORIZONTAL;
		gbc_txtFieldCoordinates.insets = new Insets(0, 0, 5, 5);
		gbc_txtFieldCoordinates.gridx = 1;
		gbc_txtFieldCoordinates.gridy = 4;
		panel.add(txtFieldCoordinates, gbc_txtFieldCoordinates);
		txtFieldCoordinates.setColumns(10);
		// submit button and action listener
		JButton btnSubmit = new JButton("Submit");
		btnSubmit.addMouseListener(new MouseAdapter() {
			@Override
			// this method checks the query type and does some error handling
			public void mousePressed(MouseEvent e) {
				String coordinates = txtFieldCoordinates.getText().trim();
				String colours = txtFieldColours.getText().trim();
				if (colours.equals("") || colours.isEmpty()) {
					colours = "null";
				}
				String subString = txtFieldSubstring.getText().trim();
				String arguments = "";
				// calls pin and displays result
				if (rdBtnPin.isSelected() == true) {
					txtFieldClientOutput.setText(Client.pin(coordinates, in, out));

				} else if (rdBtnUnpin.isSelected() == true) {
					// calls unpin and displays result has slightly better error messaging than pin,
					// due to time
					String checkCoords[] = coordinates.split(" ");
					if (checkCoords.length != 2) {
						txtFieldClientOutput
								.setText("Unpin takes two coordinate arguments x and y seperated by spaces.");
					} else {
						txtFieldClientOutput.setText(Client.unpin(coordinates, in, out));
					}
					// calls post and displays result, some error handling for number of coord
					// arguments
				} else if (rdBtnPost.isSelected() == true) {
					String checkCoords[] = coordinates.split(" ");
					if (checkCoords.length != 4) {
						txtFieldClientOutput.setText(
								"Post takes four coordinate arguments x and y and width and height seperated by spaces.");
					} else {
						txtFieldClientOutput
								.setText(Client.post(coordinates + " " + colours + " " + subString, in, out));
					}

					// last case is a get query, good amount of input parsing to make sure the query
					// is formated properly
				} else {
					if (colours.equals("null") || colours.length() == 0 || colours.split(" ").length != 1) {
						arguments += "null ";
					} else {
						arguments += colours.trim() + " ";
					}

					if (coordinates.length() == 0 || coordinates.split(" ").length != 2) {
						arguments += "null ";

					} else {
						arguments += coordinates.trim() + " ";
					}

					if (subString.length() == 0 || subString.split(" ").length != 1) {
						arguments += "null ";
					} else {
						arguments += subString.trim() + " ";
					}

					// System.out.println(arguments.trim()); <- antiquated
					// txtFieldClientOutput.setText(arguments); <- antiquated testing
					// calls get
					txtFieldClientOutput.setText(Client.get(arguments.trim(), in, out));

				}
				// clears the user input fields
				txtFieldColours.setText("");
				txtFieldCoordinates.setText("");
				txtFieldSubstring.setText("");
			}
		});
		GridBagConstraints gbc_btnSubmit = new GridBagConstraints();
		gbc_btnSubmit.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnSubmit.insets = new Insets(0, 0, 5, 5);
		gbc_btnSubmit.gridx = 6;
		gbc_btnSubmit.gridy = 4;
		panel.add(btnSubmit, gbc_btnSubmit);
		// rigid area for esthetic
		Component rigidArea_2 = Box.createRigidArea(new Dimension(20, 20));
		GridBagConstraints gbc_rigidArea_2 = new GridBagConstraints();
		gbc_rigidArea_2.insets = new Insets(0, 0, 5, 0);
		gbc_rigidArea_2.gridx = 8;
		gbc_rigidArea_2.gridy = 4;
		panel.add(rigidArea_2, gbc_rigidArea_2);
		// clear button and action listener calls the clear command and displays the
		// result no error handling since clear is safe
		JButton btnClear = new JButton("Clear");
		btnClear.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent e) {
				txtFieldClientOutput.setText(Client.clear(in, out));
			}
		});
		// lable for colours text field
		JLabel lblEnterYourColours = new JLabel("Enter your colour(s) if applicable:");
		GridBagConstraints gbc_lblEnterYourColours = new GridBagConstraints();
		gbc_lblEnterYourColours.anchor = GridBagConstraints.WEST;
		gbc_lblEnterYourColours.insets = new Insets(0, 0, 5, 5);
		gbc_lblEnterYourColours.gridx = 1;
		gbc_lblEnterYourColours.gridy = 5;
		panel.add(lblEnterYourColours, gbc_lblEnterYourColours);
		// related to the clear button above
		GridBagConstraints gbc_btnClear = new GridBagConstraints();
		gbc_btnClear.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnClear.insets = new Insets(0, 0, 5, 5);
		gbc_btnClear.gridx = 6;
		gbc_btnClear.gridy = 5;
		panel.add(btnClear, gbc_btnClear);
		// disconnect button and action listener calls the system exit in the disconnect
		// function
		JButton btnDisconnect = new JButton("Disconnect");
		btnDisconnect.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent e) {
				Client.disconnect();

			}
		});
		// text field for colours
		txtFieldColours = new JTextField();
		GridBagConstraints gbc_txtFieldColours = new GridBagConstraints();
		txtFieldColours.setText("");
		gbc_txtFieldColours.gridwidth = 5;
		gbc_txtFieldColours.insets = new Insets(0, 0, 5, 5);
		gbc_txtFieldColours.fill = GridBagConstraints.HORIZONTAL;
		gbc_txtFieldColours.gridx = 1;
		gbc_txtFieldColours.gridy = 6;
		panel.add(txtFieldColours, gbc_txtFieldColours);
		txtFieldColours.setColumns(10);
		// related to the disconnect button above
		GridBagConstraints gbc_btnDisconnect = new GridBagConstraints();
		gbc_btnDisconnect.anchor = GridBagConstraints.WEST;
		gbc_btnDisconnect.insets = new Insets(0, 0, 5, 5);
		gbc_btnDisconnect.gridx = 6;
		gbc_btnDisconnect.gridy = 6;
		panel.add(btnDisconnect, gbc_btnDisconnect);
		// lable for the substring/message text field
		JLabel lblEnterYourSubstring = new JLabel("Enter your sub-string (get), or message (post):");
		GridBagConstraints gbc_lblEnterYourSubstring = new GridBagConstraints();
		gbc_lblEnterYourSubstring.gridwidth = 4;
		gbc_lblEnterYourSubstring.anchor = GridBagConstraints.WEST;
		gbc_lblEnterYourSubstring.insets = new Insets(0, 0, 5, 5);
		gbc_lblEnterYourSubstring.gridx = 1;
		gbc_lblEnterYourSubstring.gridy = 7;
		panel.add(lblEnterYourSubstring, gbc_lblEnterYourSubstring);
		// substring/message text field
		txtFieldSubstring = new JTextField();
		GridBagConstraints gbc_txtFieldSubstring = new GridBagConstraints();
		txtFieldSubstring.setText("");
		gbc_txtFieldSubstring.gridwidth = 5;
		gbc_txtFieldSubstring.insets = new Insets(0, 0, 5, 5);
		gbc_txtFieldSubstring.fill = GridBagConstraints.HORIZONTAL;
		gbc_txtFieldSubstring.gridx = 1;
		gbc_txtFieldSubstring.gridy = 8;
		panel.add(txtFieldSubstring, gbc_txtFieldSubstring);
		txtFieldSubstring.setColumns(10);

		// radio button for post when its pressed it sets the fields that it uses to
		// editable
		// some of the other radio buttons set some fields to uneditable as needed
		rdBtnPost = new JRadioButton("Post");
		rdBtnPost.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent e) {
				txtFieldColours.setEditable(true);
				txtFieldCoordinates.setEditable(true);
				txtFieldSubstring.setEditable(true);
			}

		});
		rdBtnPost.setSelected(true);
		buttonGroup.add(rdBtnPost);
		GridBagConstraints gbc_rdBtnPost = new GridBagConstraints();
		gbc_rdBtnPost.anchor = GridBagConstraints.WEST;
		gbc_rdBtnPost.insets = new Insets(0, 0, 5, 5);
		gbc_rdBtnPost.gridx = 1;
		gbc_rdBtnPost.gridy = 9;
		panel.add(rdBtnPost, gbc_rdBtnPost);

		rdBtnPin = new JRadioButton("Pin");
		rdBtnPin.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent e) {
				txtFieldColours.setEditable(false);
				txtFieldCoordinates.setEditable(true);
				txtFieldSubstring.setEditable(false);
			}
		});
		buttonGroup.add(rdBtnPin);
		GridBagConstraints gbc_rdBtnPin = new GridBagConstraints();
		gbc_rdBtnPin.anchor = GridBagConstraints.WEST;
		gbc_rdBtnPin.insets = new Insets(0, 0, 5, 5);
		gbc_rdBtnPin.gridx = 2;
		gbc_rdBtnPin.gridy = 9;
		panel.add(rdBtnPin, gbc_rdBtnPin);

		rdBtnGet = new JRadioButton("Get");
		rdBtnGet.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent e) {
				txtFieldColours.setEditable(true);
				txtFieldCoordinates.setEditable(true);
				txtFieldSubstring.setEditable(true);
			}
		});
		JButton btnGetPins = new JButton("Get Pins");
		btnGetPins.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent e) {
				txtFieldClientOutput.setText(Client.getPins());
			}
		});
		GridBagConstraints gbc_btnGetPins = new GridBagConstraints();
		gbc_btnGetPins.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnGetPins.insets = new Insets(0, 0, 5, 5);
		gbc_btnGetPins.gridx = 6;
		gbc_btnGetPins.gridy = 7;
		panel.add(btnGetPins, gbc_btnGetPins);
		buttonGroup.add(rdBtnGet);
		GridBagConstraints gbc_rdBtnGet = new GridBagConstraints();
		gbc_rdBtnGet.anchor = GridBagConstraints.WEST;
		gbc_rdBtnGet.insets = new Insets(0, 0, 5, 5);
		gbc_rdBtnGet.gridx = 1;
		gbc_rdBtnGet.gridy = 10;
		panel.add(rdBtnGet, gbc_rdBtnGet);

		rdBtnUnpin = new JRadioButton("Unpin");
		rdBtnUnpin.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent e) {
				txtFieldColours.setEditable(false);
				txtFieldCoordinates.setEditable(true);
				txtFieldSubstring.setEditable(false);
			}
		});
		buttonGroup.add(rdBtnUnpin);
		GridBagConstraints gbc_rdBtnUnpin = new GridBagConstraints();
		gbc_rdBtnUnpin.anchor = GridBagConstraints.WEST;
		gbc_rdBtnUnpin.insets = new Insets(0, 0, 5, 5);
		gbc_rdBtnUnpin.gridx = 2;
		gbc_rdBtnUnpin.gridy = 10;
		panel.add(rdBtnUnpin, gbc_rdBtnUnpin);
		// label for server info text field
		JLabel lblNewLabel_2 = new JLabel("Server information");
		GridBagConstraints gbc_lblNewLabel_2 = new GridBagConstraints();
		gbc_lblNewLabel_2.anchor = GridBagConstraints.WEST;
		gbc_lblNewLabel_2.insets = new Insets(0, 0, 5, 5);
		gbc_lblNewLabel_2.gridx = 1;
		gbc_lblNewLabel_2.gridy = 11;
		panel.add(lblNewLabel_2, gbc_lblNewLabel_2);
		// text field for server info, set to uneditable since its information from the
		// server
		txtFieldServerInfo = new JTextArea();
		GridBagConstraints gbc_txtFieldServerInfo = new GridBagConstraints();
		gbc_txtFieldServerInfo.gridwidth = 6;
		gbc_txtFieldServerInfo.insets = new Insets(0, 0, 5, 5);
		gbc_txtFieldServerInfo.fill = GridBagConstraints.BOTH;
		gbc_txtFieldServerInfo.gridx = 1;
		gbc_txtFieldServerInfo.gridy = 12;
		txtFieldServerInfo.setEditable(false);
		panel.add(txtFieldServerInfo, gbc_txtFieldServerInfo);
		// label for the server output text field
		JLabel label = new JLabel("Server output");
		GridBagConstraints gbc_label = new GridBagConstraints();
		gbc_label.anchor = GridBagConstraints.WEST;
		gbc_label.insets = new Insets(0, 0, 5, 5);
		gbc_label.gridx = 1;
		gbc_label.gridy = 13;
		panel.add(label, gbc_label);
		// text area that displays either client side error messaging or server result
		// /error messaging
		txtFieldClientOutput = new JTextArea();
		GridBagConstraints gbc_txtFieldClientOutput = new GridBagConstraints();
		gbc_txtFieldClientOutput.gridwidth = 6;
		gbc_txtFieldClientOutput.insets = new Insets(0, 0, 5, 5);
		gbc_txtFieldClientOutput.fill = GridBagConstraints.BOTH;
		gbc_txtFieldClientOutput.gridx = 1;
		gbc_txtFieldClientOutput.gridy = 14;
		txtFieldClientOutput.setEditable(false);
		panel.add(txtFieldClientOutput, gbc_txtFieldClientOutput);
		// rigid area for esthetic
		Component rigidArea_4 = Box.createRigidArea(new Dimension(20, 20));
		GridBagConstraints gbc_rigidArea_4 = new GridBagConstraints();
		gbc_rigidArea_4.insets = new Insets(0, 0, 5, 5);
		gbc_rigidArea_4.gridx = 0;
		gbc_rigidArea_4.gridy = 14;
		panel.add(rigidArea_4, gbc_rigidArea_4);
		// same see above
		Component rigidArea_5 = Box.createRigidArea(new Dimension(20, 20));
		GridBagConstraints gbc_rigidArea_5 = new GridBagConstraints();
		gbc_rigidArea_5.insets = new Insets(0, 0, 5, 0);
		gbc_rigidArea_5.gridx = 8;
		gbc_rigidArea_5.gridy = 14;
		panel.add(rigidArea_5, gbc_rigidArea_5);
		// same see above
		Component rigidArea_3 = Box.createRigidArea(new Dimension(20, 20));
		GridBagConstraints gbc_rigidArea_3 = new GridBagConstraints();
		gbc_rigidArea_3.insets = new Insets(0, 0, 0, 5);
		gbc_rigidArea_3.gridx = 5;
		gbc_rigidArea_3.gridy = 15;
		panel.add(rigidArea_3, gbc_rigidArea_3);
	}

}
